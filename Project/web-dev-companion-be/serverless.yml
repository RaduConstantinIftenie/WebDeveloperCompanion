service: web-dev-companion-be
frameworkVersion: '3'

provider:
  name: aws
  runtime: java17
  stage: dev
  region: eu-west-1
  logRetentionInDays: 1
  apiGateway:
    apiKeys:
      -  web-dev-companion-api-key
    usagePlan:
      limit: 5000
      offset: 2
      period: week
    throttle:
      burstLimit: 10
      rateLimit: 5

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:+
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/${self:service}-${self:provider.stage}.jar

functions:
  hello:
    handler: com.serverless.Handler
    role: IamRoleLambdaExecution
    events:
      - http:
          path: /hello
          method: get
          authorizer:
            arn: arn:aws:lambda:eu-west-1:851725354931:function:web-dev-companion-auth-dev-auth
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
          private: true
    vpc:
      securityGroupIds:
        - sg-027519a263f128e18
        - sg-0f6c6fd69d3c47824
      subnetIds:
        - subnet-051d120ed94397a30
        - subnet-0ffaa0f795a36ebd5

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    IamRoleLambdaExecution:
      Type: 'AWS::IAM::Role'
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: 
                  - events.amazonaws.com
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: cm-be-dev-lambda
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - ec2:CreateNetworkInterface
                    - ec2:DescribeNetworkInterfaces
                    - ec2:DeleteNetworkInterface
                    - kms:Decrypt
                  Resource: '*'

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
